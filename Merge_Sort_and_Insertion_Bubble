import random
import time


def bubble_sort(nums):
    # Create a copy of the list, to avoid changing it
    nums = list(nums)

    # 4. Repeat the process n-1 times
    for a in range(len(nums) - 1,0,-1):

        # 1. Iterate over the array (except last element)
        for i in range(a):

            # 2. Compare the number with
            if nums[i] > nums[i + 1]:
                # 3. Swap the two elements
                nums[i], nums[i + 1] = nums[i + 1], nums[i]

    # Return the sorted list
    return nums

def insertion_sort(nums):
    for i in range(len(nums)):
        j=i-1
        current=nums.pop(i)
        while j>=0 and nums[j]>current:  #change to < , you'll get it in desending order
            j-=1
        nums.insert(j+1,current)
    return nums

# print(insertion_sort([5,3,1,2,9,8]))

def merge_sort(nums):
    if len(nums) <=1:
        return nums
    mid=len(nums)//2
    left_half=nums[:mid]
    right_half=nums[mid:]
    left_sorted,right_sorted=merge_sort(left_half),merge_sort(right_half)
    #original sorted list
    sorted_nums=merge(left_sorted,right_sorted)
    return sorted_nums
def merge(left,right):
    len_l,len_r=len(left),len(right)
    left_index,right_index=0,0
    sort_arr=[]
    while True:
        if right_index > len_r-1:
            sort_arr.extend(left[left_index:])
            return sort_arr
        if left_index > len_l-1:
            sort_arr.extend(right[right_index:])
            return sort_arr
        if left[left_index] < right[right_index]:
            sort_arr.append(left[left_index])
            left_index+=1
        else:
            sort_arr.append(right[right_index])
            right_index+=1

print(merge_sort([5,3,1,2,9,8,0,89,67,66,0,0]))
random_list=[x for x in range (10**7)]
random.shuffle(random_list)

stat=time.perf_counter()
print(merge_sort(random_list))
print(time.perf_counter() - stat)
